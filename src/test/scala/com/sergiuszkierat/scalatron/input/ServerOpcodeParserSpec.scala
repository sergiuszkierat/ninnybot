package com.sergiuszkierat.scalatron.input

import org.scalatest.{FeatureSpec, GivenWhenThen}
import scala.Predef._
import com.sergiuszkierat.scalatron.input.exception.{InvalidCommandParameterKeyException, InvalidCommandParametersException, InvalidCommandException}
import org.scalatest.prop.TableDrivenPropertyChecks

/**
 * @author Sergiusz Kierat <sergiusz.kierat@gmail.com>
 * @since 2013/10/01
 */
class ServerOpcodeParserSpec extends FeatureSpec with GivenWhenThen with TableDrivenPropertyChecks {

  feature("Server sends \"Welcome(name=String,path=string,apocalypse=int,round=int)\" opcode") {
    scenario("bot parse message") {
      Given("server sends \"Welcome(name=ninnybot,path=/opt/scalatron-1.0.0.2/bots/ninnybot,apocalypse=100,round=0)\"")
      val welcomeOpcode = "Welcome(name=ninnybot,path=/opt/scalatron-1.0.0.2/bots/ninnybot,apocalypse=100,round=0)"
      val expectedParameters = Map(
        "name" -> "ninnybot",
        "path" -> "/opt/scalatron-1.0.0.2/bots/ninnybot",
        "apocalypse" -> 100,
        "round" -> 0
      )

      When("parse")
      val parsedOpcode: (String, Map[String, Any]) = ServerOpcodeParser(welcomeOpcode)

      Then("verify parsed opcode is 'Welcome'")
      assert(parsedOpcode._1 === "Welcome")
      And("parsed parameters 'name=ninnybot, path=/opt/scalatron-1.0.0.2/bots/ninnybot, apocalypse=100, round=0'")
      assert(parsedOpcode._2 === expectedParameters)
    }

    scenario("bot parse invalid opcode 'Welcome'") {
      val invalidWelcomeOpcode = "Welcome"

      val thrown = intercept[InvalidCommandException] {
        ServerOpcodeParser(invalidWelcomeOpcode)
      }

      assert(thrown.getMessage === invalidWelcomeOpcode)
    }

    scenario("bot parse invalid opcode 'Welcome(name=)'") {
      val invalidWelcomeOpcode = "Welcome(name=)"

      val thrown = intercept[InvalidCommandParametersException] {
        ServerOpcodeParser(invalidWelcomeOpcode)
      }

      assert(thrown.getMessage === "name=")
    }

    scenario("bot parse opcode with invalid parameter key 'Welcome(invalid=56)'") {
      val invalidWelcomeOpcode = "Welcome(name=record,invalid=56,inappropriate=test)"

      val thrown = intercept[InvalidCommandParameterKeyException] {
        ServerOpcodeParser(invalidWelcomeOpcode)
      }

      assert(thrown.getMessage === "invalid,inappropriate")
    }

    scenario("bot parse invalid opcode 'Welcome()'") {
      pending
    }

    scenario("bot parse invalid opcodes generated by scalaCheck") {
      pending
    }
  }

  feature("Server sends \"React(generation=int,name=string,time=int,view=string,energy=int,master=int:int)\" opcode") {
    info(" In order to avoid mistakes")
    info("As a client")
    info(" I want to verify 'React' opcodes form server")

    scenario("bot parse message") {
      Given("server sends \"React(generation=1,name=slave,time=3,view=viewString,energy=50,master=1:-1)\"")
      val reactOpcode = "React(generation=1,name=slave,time=3,view=viewString,energy=50,master=1:-1)"
      val expectedParameters = Map(
        "generation" -> 1,
        "name" -> "slave",
        "time" -> 3,
        "view" -> "viewString",
        "energy" -> 50,
        "master" -> "1:-1"
      )

      When("parse")
      val parsedOpcode: (String, Map[String, Any]) = ServerOpcodeParser(reactOpcode)

      Then("verify parsed opcode is 'React'")
      assert(parsedOpcode._1 === "React")
      And("parsed parameters 'generation=1, name=slave, time=3, view=viewString, energy=50, master=1:-1'")
      assert(parsedOpcode._2 === expectedParameters)
    }
  }

  val invalidReactOpcodes = Table(
    ("Opcode", "ExpectedMessage"),
    ("React(generation=1,name=slave,time=3,view=view,energy=50,master=1:-1", "React(generation=1,name=slave,time=3,view=view,energy=50,master=1:-1"),
    ("React()", "Empty parameters")
  )

  feature("Server sends invalid \"React\" opcode") {

    scenario("bot parse invalid React opcode") {
      forAll(invalidReactOpcodes) {
        (invalidOpcode: String, expectedMessage: String) =>
          Given("a invalid opcode '" + invalidOpcode + "'")

          When("i try parse")
          val thrown = intercept[RuntimeException] {
            ServerOpcodeParser(invalidOpcode)
          }

          Then("i get " + expectedMessage)
          assert(thrown.getMessage === expectedMessage)
      }
    }
  }

  feature("Server sends invalid \"Goodbye\" opcode") {
    scenario("bot parse invalid Goodbye opcode") {
      pending
    }
  }
}