package com.sergiuszkierat.scalatron.input

import org.scalatest.{FeatureSpec, GivenWhenThen, BeforeAndAfter}
import scala.Predef._
import com.sergiuszkierat.scalatron.input.exception.{InvalidCommandParametersException, InvalidCommandException}

/**
 * @author Sergiusz Kierat <sergiusz.kierat@gmail.com>
 * @since 2013/10/01
 */
class ServerOpcodeParserSpec extends FeatureSpec with BeforeAndAfter
                                                 with GivenWhenThen {

  feature("Server sends \"Welcome(name=String,path=string,apocalypse=int,round=int)\" opcode") {
    scenario("bot parse message") {
      Given("server sends \"Welcome(name=ninnybot,path=/opt/scalatron-1.0.0.2/bots/ninnybot,apocalypse=100,round=0)\"")
      val welcomeOpcode = "Welcome(name=ninnybot,path=/opt/scalatron-1.0.0.2/bots/ninnybot,apocalypse=100,round=0)"
      val expectedParameters = Map(
        "name" -> "ninnybot",
        "path" -> "/opt/scalatron-1.0.0.2/bots/ninnybot",
        "apocalypse" -> 100,
        "round" -> 0
      )

      When("parse")
      val parsedOpcode: (String, Map[String, Any]) = ServerOpcodeParser(welcomeOpcode)

      Then("verify parsed opcode is 'Welcome'")
      assert(parsedOpcode._1 === "Welcome")
      And("parsed parameters 'name=ninnybot, path=/opt/scalatron-1.0.0.2/bots/ninnybot, apocalypse=100, round=0'")
      assert(parsedOpcode._2 === expectedParameters)
    }

    scenario("bot parse invalid opcode 'Welcome'") {
      val invalidWelcomeOpcode = "Welcome"

      val thrown = intercept[InvalidCommandException] {
        ServerOpcodeParser(invalidWelcomeOpcode)
      }

      assert(thrown.getMessage === invalidWelcomeOpcode)
    }

    scenario("bot parse invalid opcode 'Welcome(name=)'") {
      val invalidWelcomeOpcode = "Welcome(name=)"

      val thrown = intercept[InvalidCommandParametersException] {
        ServerOpcodeParser(invalidWelcomeOpcode)
      }

      assert(thrown.getMessage === "name=")
    }

    scenario("bot parse invalid opcode 'Welcome()'") {
      pending
    }

    scenario("bot parse invalid opcodes generated by scalaCheck") {
      pending
    }
  }
}